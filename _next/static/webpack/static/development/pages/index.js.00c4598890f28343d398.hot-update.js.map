{"version":3,"file":"static/webpack/static/development/pages/index.js.00c4598890f28343d398.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nconst { Octokit } = require('@octokit/rest')\nconst token = 'hogefuga'\nconst octokit = new Octokit({\n  auth: 'f550e69fc6954a796b2e7fcb7bc916a2c5adb114'\n})\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      posts: [],\n      downloads: [],\n      postsMax: 20,\n      downloadsMax: 20,\n      detail: null,\n      postIndex: null,\n      downloadIndex: null,\n      token: null\n    }\n    this.repo = {\n      owner: 'cxsnxlt338',\n      repo: 'monitor-db',\n      headers: {\n        'If-None-Match': ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    window.App = this\n    this.octokit = octokit\n    this.getData()\n  }\n\n  async getData() {\n    let posts = await this.octokit.repos.getContent(\n      Object.assign(this.repo, { path: 'posts.json' })\n    )\n    let downloads = await this.octokit.repos.getContent(\n      Object.assign(this.repo, { path: 'downloads.json' })\n    )\n    try {\n      posts = decodeURIComponent(escape(atob(posts.data.content)))\n      posts = JSON.parse(posts).reverse()\n      downloads = decodeURIComponent(escape(atob(downloads.data.content)))\n      downloads = JSON.parse(downloads).reverse()\n      this.setState({ posts: posts, downloads: downloads })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  onClick(type, index) {\n    console.log(type, index)\n    if (type == 'post') {\n      if (this.state.postIndex == index) {\n        this.setState({ postIndex: null })\n      } else {\n        this.setState({ postIndex: index })\n      }\n    } else {\n      if (this.state.downloadIndex == index) {\n        this.setState({ downloadIndex: null })\n      } else {\n        this.setState({ downloadIndex: index })\n      }\n    }\n  }\n\n  postDetailFormat(data) {\n    let item = data\n    console.log(item)\n    const keys = ['original', 'title', 'category', 'image', 'article', 'tags', 'videoType', 'video', 'link', 'duration', 'clickCount', 'src', 'siteName', 'linkCount', 'date']\n    try {\n      item.data.ip = JSON.parse(item.data.ip)\n    } catch (err) { }\n    item.data.wait = item.data.wait / 60\n    const res = {}\n    for (let key of keys) {\n      res[key] = item.data.item[key]\n    }\n    item.data.item = res\n    return item\n  }\n\n  downloadDetailFormat(data) {\n    let item = data\n    const keys = ['image', 'url', 'videoType', 'duration', 'clickCount']\n    try {\n      item.data.ip = JSON.parse(item.data.ip)\n    } catch (err) { }\n    item.data.items = item.data.items.map((i) => {\n      const res = {}\n      for (let key of keys) {\n        res[key] = i[key]\n      }\n      return res\n    })\n    return item\n  }\n\n  timeFormat(timestamp) {\n    const time = new Date(timestamp)\n    let year = time.getFullYear()\n    let month = '' + (time.getMonth() + 1)\n    let day = '' + time.getDate()\n    let hour = '' + time.getHours()\n    let min = '' + time.getMinutes()\n    if (month.length < 2)\n      month = '0' + month\n    if (day.length < 2)\n      day = '0' + day\n    if (hour.length < 2)\n      hour = '0' + hour\n    if (min.length < 2)\n      min = '0' + min\n    return `${year}-${month}-${day} ${hour}:${min}`\n  }\n\n  render() {\n    return (\n      <div>\n        <title>Test</title>\n        <div className=\"ui centered grid\">\n          <div className=\"ten wide column\">\n            { this.state.token !== token &&\n              <p>hoge</p>\n            }\n            { this.state.token === token &&\n              <div>\n                <h1 id=\"title\"><i className=\"fas fa-tachometer-alt fa-fw\"></i>&nbsp;Monitor</h1>\n\n                <h1>Posts</h1>\n                <p>{ this.state.posts.filter(i => i.error).length } error</p>\n                <table className=\"ui unstackable table\">\n                  <thead>\n                    <tr>\n                      <th className=\"status \">Status</th>\n                      <th className=\"timestamp\">Time</th>\n                      <th>Blog</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    { this.state.posts.slice(0, this.state.postsMax).map((post, i) => {\n                      return (\n                        <tr key={ i }\n                          className={ this.state.postIndex === i ? 'select' : (post.error ? 'negative' : 'positive') }\n                          onClick={ this.onClick.bind(this, 'post', i) }\n                        >\n                          <td className=\"status center aligned\">\n                            <i className={ post.error ? 'icon close' : 'icon checkmark' } />\n                          </td>\n                          <td className=\"timestamp\">{ this.timeFormat(post.timestamp) }</td>\n                          { !post.error &&\n                            <td data-label=\"blog\">{ post.data.item.article }</td>\n                          }\n                          { post.error &&\n                            <td data-label=\"blog\">{ post.data.blog }</td>\n                          }\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </table>\n                { this.state.postIndex !== null &&\n                  <pre>{ JSON.stringify(this.postDetailFormat(this.state.posts[this.state.postIndex]), null, 2) }</pre>\n                }\n\n                <h1>Downloads</h1>\n                <p>{ this.state.downloads.filter(i => i.error).length } error</p>\n                <table className=\"ui unstackable table\">\n                  <thead>\n                    <tr>\n                      <th className=\"status\">Status</th>\n                      <th className=\"timestamp\">Time</th>\n                      <th>Key</th>\n                      <th>Page</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    { this.state.downloads.slice(0, this.state.downloadsMax).map((download, i) => {\n                      return (\n                        <tr key={ i }\n                          className={ this.state.downloadIndex === i ? 'select' : (download.error ? 'negative' : 'positive') }\n                          onClick={ this.onClick.bind(this, 'crawl', i) }\n                        >\n                          <td className=\"status center aligned\">\n                            <i className={ download.error ? 'icon close' : 'icon checkmark' } />\n                          </td>\n                          <td className=\"timestamp\">{ this.timeFormat(download.timestamp) }</td>\n                          <td data-label=\"key\">{ download.data.key }</td>\n                          <td data-label=\"count\">{ download.data.current }</td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </table>\n                { this.state.downloadIndex !== null &&\n                  <pre>{ JSON.stringify(this.downloadDetailFormat(this.state.downloads[this.state.downloadIndex]), null, 2) }</pre>\n                }\n\n                <div className=\"ui modal\">\n                  <div className=\"header\">Header</div>\n                  <div className=\"content\">\n                    <p>fafjaeojfaoie</p>\n                  </div>\n                  <div className=\"actions\">\n                    <div className=\"ui approve button\">Approve</div>\n                    <div className=\"ui button\">Neutral</div>\n                    <div className=\"ui cancel button\">Cancel</div>\n                  </div>\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AADA;AAHA;AAbA;AAoBA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAGA;AACA;AAAA;AACA;;AAFA;;AAGA;AACA;AAAA;AACA;;AAFA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AASA;;;;AArNA;AACA;AAuNA;;;;A","sourceRoot":""}