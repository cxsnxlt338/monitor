{"version":3,"file":"static/webpack/static/development/pages/index.js.4a58d66e5944dd47ea3d.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nconst { Octokit } = require('@octokit/rest')\n\nconst octokit = new Octokit({\n  auth: '501d530a159fc4fb7f946263b91fc509a11c6d85'\n})\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      posts: [],\n      downloads: [],\n    }\n  }\n\n  componentDidMount() {\n    window.App = this\n    this.octokit = octokit\n    this.getData()\n  }\n\n  async getData() {\n    const res = await this.octokit.repos.getContent({\n      owner: 'ryosuzuki',\n      repo: 'monitor-db',\n      path: 'db.json',\n      headers: {\n        'If-None-Match': ''\n      }\n    })\n    try {\n      let items = JSON.parse(atob(res.data.content))\n      items = items.reverse()\n      console.log(items)\n      const posts = items.filter((item => item.type == 'post'))\n      const downloads = items.filter((item => item.type !== 'post'))\n      this.setState({ items: items, posts: posts, downloads: downloads })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <title>Monitor</title>\n        <div className=\"ui two column centered grid\">\n          <div className=\"column\">\n            <h1>Monitor</h1>\n\n            <h1>Post</h1>\n            <table className=\"ui unstackable table\">\n              <thead>\n                <tr>\n                  <th>Status</th>\n                  <th>Time</th>\n                  <th>Blog</th>\n                </tr>\n              </thead>\n              <tbody>\n                { this.state.posts.map((post, i) => {\n                  return (\n                    <tr key={ i } className={ post.error ? 'negative' : 'positive' }>\n                      <td data-label=\"error\">\n                        <i className={ post.error ? 'icon close' : 'icon checkmark' } />\n                      </td>\n                      <td data-label=\"timestamp\">{ post.timestamp }</td>\n                      { !post.error &&\n                        <td data-label=\"blog\">{ post.data.item.article }</td>\n                      }\n                      { post.error &&\n                        <td data-label=\"blog\">{ post.data.blog }</td>\n                      }\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n\n            <h1>downloads</h1>\n            <table className=\"ui unstackable table\">\n              <thead>\n                <tr>\n                  <th>Status</th>\n                  <th>Time</th>\n                  <th>Key</th>\n                </tr>\n              </thead>\n              <tbody>\n                { this.state.downloads.map((download, i) => {\n                  return (\n                    <tr key={ i } className={ download.error ? 'negative' : 'positive' }>\n                      <td data-label=\"error\">\n                        <i className={ download.error ? 'icon close' : 'icon checkmark' } />\n                      </td>\n                      <td data-label=\"timestamp\">{ download.timestamp }</td>\n                      <td data-label=\"key\">{ download.data.key }</td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AACA;;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AAGA;AAAA;AACA;AAAA;AAIA;AAAA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAKA;AAAA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAQA;;;;AAtGA;AACA;AAwGA;;;;A","sourceRoot":""}