{"version":3,"file":"static/webpack/static/development/pages/index.js.59d80696d70216f57ea2.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nconst { Octokit } = require('@octokit/rest')\n\nconst octokit = new Octokit({\n  auth: '501d530a159fc4fb7f946263b91fc509a11c6d85'\n})\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      posts: [],\n      downloads: [],\n      postsMax: 20,\n      downloadsMax: 20,\n      detail: null,\n      postIndex: null,\n      downloadIndex: null,\n    }\n  }\n\n  componentDidMount() {\n    window.App = this\n    this.octokit = octokit\n    this.getData()\n  }\n\n  async getData() {\n    const res = await this.octokit.repos.getContent({\n      owner: 'ryosuzuki',\n      repo: 'monitor-db',\n      path: 'db.json',\n      headers: {\n        'If-None-Match': ''\n      }\n    })\n    try {\n      const text = decodeURIComponent(escape(atob(res.data.content)))\n      let items = JSON.parse(text)\n      items = items.reverse()\n      console.log(items)\n      let posts = items\n        .filter((item => item.type == 'post'))\n      let downloads = items\n        .filter((item => item.type !== 'post'))\n      this.setState({ items: items, posts: posts, downloads: downloads })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  onClick(type, index) {\n    console.log(type, index)\n    if (type == 'post') {\n      if (this.state.postIndex == index) {\n        this.setState({ postIndex: null })\n      } else {\n        this.setState({ postIndex: index })\n      }\n    } else {\n      if (this.state.downloadIndex == index) {\n        this.setState({ downloadIndex: null })\n      } else {\n        this.setState({ downloadIndex: index })\n      }\n    }\n  }\n\n  downloadDetailFormat(item) {\n    const keys = [\n      'image',\n      'url',\n      'videoType',\n      'linkCount',\n      'duration',\n      'clickCount',\n      'updatedAt'\n    ]\n\n    item.data.items = item.data.items.map((i) => {\n      const res = {}\n      for (let key of keys) {\n        res[key] = i[key]\n      }\n      return res\n    })\n    return item\n  }\n\n  timeFormat(timestamp) {\n    const time = new Date(timestamp)\n    let year = time.getFullYear()\n    let month = '' + (time.getMonth() + 1)\n    let day = '' + time.getDate()\n    let hour = '' + time.getHours()\n    let min = '' + time.getMinutes()\n    if (month.length < 2)\n      month = '0' + month\n    if (day.length < 2)\n      day = '0' + day\n    if (hour.length < 2)\n      hour = '0' + hour\n    if (min.length < 2)\n      min = '0' + min\n    return `${year}-${month}-${day} ${hour}:${min}`\n  }\n\n  render() {\n    return (\n      <div>\n        <title>Monitor</title>\n        <style>\n        </style>\n        <div className=\"ui centered grid\">\n          <div className=\"ten wide column\">\n            <h1>Monitor</h1>\n\n            <h1>Post</h1>\n            <table className=\"ui unstackable table\">\n              <thead>\n                <tr>\n                  <th className=\"status \">Status</th>\n                  <th className=\"timestamp\">Time</th>\n                  <th>Blog</th>\n                </tr>\n              </thead>\n              <tbody>\n                { this.state.posts.slice(0, this.state.postsMax).map((post, i) => {\n                  return (\n                    <tr key={ i }\n                      className={ this.state.postIndex === i ? 'select' : (post.error ? 'negative' : 'positive') }\n                      onClick={ this.onClick.bind(this, 'post', i) }\n                    >\n                      <td className=\"status center aligned\">\n                        <i className={ post.error ? 'icon close' : 'icon checkmark' } />\n                      </td>\n                      <td className=\"timestamp\">{ this.timeFormat(post.timestamp) }</td>\n                      { !post.error &&\n                        <td data-label=\"blog\">{ post.data.item.article }</td>\n                      }\n                      { post.error &&\n                        <td data-label=\"blog\">{ post.data.blog }</td>\n                      }\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n\n            { this.state.postIndex &&\n              <pre>{ JSON.stringify(this.state.posts[this.state.postIndex], null, 2) }</pre>\n            }\n\n            <h1>Downloads</h1>\n            <table className=\"ui unstackable table\">\n              <thead>\n                <tr>\n                  <th className=\"status\">Status</th>\n                  <th className=\"timestamp\">Time</th>\n                  <th>Key</th>\n                  <th>Page</th>\n                </tr>\n              </thead>\n              <tbody>\n                { this.state.downloads.slice(0, this.state.downloadsMax).map((download, i) => {\n                  return (\n                    <tr key={ i }\n                      className={ this.state.downloadIndex === i ? 'select' : (download.error ? 'negative' : 'positive') }\n                      onClick={ this.onClick.bind(this, 'crawl', i) }\n                    >\n                      <td className=\"status center aligned\">\n                        <i className={ download.error ? 'icon close' : 'icon checkmark' } />\n                      </td>\n                      <td className=\"timestamp\">{ this.timeFormat(download.timestamp) }</td>\n                      <td data-label=\"key\">{ download.data.key }</td>\n                      <td data-label=\"count\">{ download.data.current }</td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n            { this.state.downloadIndex &&\n              <pre>{ JSON.stringify(this.downloadDetailFormat(this.state.downloads[this.state.downloadIndex]), null, 2) }</pre>\n            }\n\n            <div className=\"ui modal\">\n              <div className=\"header\">Header</div>\n              <div className=\"content\">\n                <p>fafjaeojfaoie</p>\n              </div>\n              <div className=\"actions\">\n                <div className=\"ui approve button\">Approve</div>\n                <div className=\"ui button\">Neutral</div>\n                <div className=\"ui cancel button\">Cancel</div>\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAYA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AACA;;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AAUA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AASA;AAAA;AAGA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AASA;;;;AApMA;AACA;AAsMA;;;;A","sourceRoot":""}